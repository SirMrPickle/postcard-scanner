# THIS FILE WAS 100% GENERATED BY AI: AMAZON Q.
# INTENTED FOR POC, NOT FINAL DEVELOPMENT


import boto3
import json
import base64
from typing import Dict, Any

class PostcardProcessingPipeline:
    def __init__(self, region_name='us-east-1'):
        self.sagemaker_client = boto3.client('sagemaker', region_name=region_name)
        self.runtime_client = boto3.client('sagemaker-runtime', region_name=region_name)
        self.textract_client = boto3.client('textract', region_name=region_name)
        self.s3_client = boto3.client('s3', region_name=region_name)
    
    def create_aya_vision_model(self, model_name: str, execution_role_arn: str, 
                               model_data_url: str, image_uri: str):
        """Create SageMaker model for Aya Vision"""
        try:
            response = self.sagemaker_client.create_model(
                ModelName=model_name,
                ExecutionRoleArn=execution_role_arn,
                PrimaryContainer={
                    'Image': image_uri,
                    'Mode': 'SingleModel',
                    'ModelDataUrl': model_data_url,
                    'Environment': {
                        'SAGEMAKER_PROGRAM': 'inference.py',
                        'SAGEMAKER_SUBMIT_DIRECTORY': '/opt/ml/code'
                    }
                }
            )
            print(f"Model {model_name} created successfully")
            return response
        except Exception as e:
            print(f"Error creating model: {e}")
            return None
    
    def create_endpoint_config(self, config_name: str, model_name: str, 
                              instance_type: str = 'ml.m5.xlarge'):
        """Create endpoint configuration"""
        try:
            response = self.sagemaker_client.create_endpoint_config(
                EndpointConfigName=config_name,
                ProductionVariants=[
                    {
                        'VariantName': 'AllTraffic',
                        'ModelName': model_name,
                        'InstanceType': instance_type,
                        'InitialInstanceCount': 1,
                        'InitialVariantWeight': 1.0
                    }
                ]
            )
            print(f"Endpoint config {config_name} created successfully")
            return response
        except Exception as e:
            print(f"Error creating endpoint config: {e}")
            return None
    
    def create_endpoint(self, endpoint_name: str, config_name: str):
        """Deploy the endpoint"""
        try:
            response = self.sagemaker_client.create_endpoint(
                EndpointName=endpoint_name,
                EndpointConfigName=config_name
            )
            print(f"Endpoint {endpoint_name} deployment started")
            return response
        except Exception as e:
            print(f"Error creating endpoint: {e}")
            return None
    
    def wait_for_endpoint(self, endpoint_name: str):
        """Wait for endpoint to be in service"""
        waiter = self.sagemaker_client.get_waiter('endpoint_in_service')
        print(f"Waiting for endpoint {endpoint_name} to be in service...")
        waiter.wait(EndpointName=endpoint_name)
        print(f"Endpoint {endpoint_name} is now in service")
    
    def invoke_aya_vision_endpoint(self, endpoint_name: str, image_data: bytes) -> Dict[Any, Any]:
        """Invoke Aya Vision endpoint for image analysis"""
        try:
            # Encode image data
            encoded_image = base64.b64encode(image_data).decode('utf-8')
            payload = {
                'image': encoded_image,
                'task': 'image_analysis_and_metadata'
            }
            
            response = self.runtime_client.invoke_endpoint(
                EndpointName=endpoint_name,
                ContentType='application/json',
                Body=json.dumps(payload)
            )
            
            result = json.loads(response['Body'].read().decode())
            return result
        except Exception as e:
            print(f"Error invoking Aya Vision endpoint: {e}")
            return {}
    
    def process_with_textract_printed(self, s3_bucket: str, s3_key: str) -> Dict[Any, Any]:
        """Process printed text using Textract"""
        try:
            response = self.textract_client.detect_document_text(
                Document={
                    'S3Object': {
                        'Bucket': s3_bucket,
                        'Name': s3_key
                    }
                }
            )
            
            # Extract text blocks
            extracted_text = []
            for block in response['Blocks']:
                if block['BlockType'] == 'LINE':
                    extracted_text.append(block['Text'])
            
            return {
                'extracted_text': extracted_text,
                'confidence_scores': [block.get('Confidence', 0) for block in response['Blocks'] if block['BlockType'] == 'LINE'],
                'raw_response': response
            }
        except Exception as e:
            print(f"Error with Textract printed text: {e}")
            return {}
    
    def process_with_textract_handwriting(self, s3_bucket: str, s3_key: str) -> Dict[Any, Any]:
        """Process handwritten text using Textract"""
        try:
            response = self.textract_client.analyze_document(
                Document={
                    'S3Object': {
                        'Bucket': s3_bucket,
                        'Name': s3_key
                    }
                },
                FeatureTypes=['FORMS', 'TABLES']
            )
            
            # Extract handwritten text
            handwritten_text = []
            for block in response['Blocks']:
                if block['BlockType'] == 'LINE' and block.get('TextType') == 'HANDWRITING':
                    handwritten_text.append(block['Text'])
            
            return {
                'handwritten_text': handwritten_text,
                'confidence_scores': [block.get('Confidence', 0) for block in response['Blocks'] if block['BlockType'] == 'LINE' and block.get('TextType') == 'HANDWRITING'],
                'raw_response': response
            }
        except Exception as e:
            print(f"Error with Textract handwriting: {e}")
            return {}
    
    def process_postcard(self, s3_bucket: str, s3_key: str, aya_vision_endpoint: str) -> Dict[Any, Any]:
        """Complete postcard processing pipeline"""
        try:
            # Download image from S3
            image_obj = self.s3_client.get_object(Bucket=s3_bucket, Key=s3_key)
            image_data = image_obj['Body'].read()
            
            # Run three AI passes
            print("Running image analysis with Aya Vision...")
            image_analysis = self.invoke_aya_vision_endpoint(aya_vision_endpoint, image_data)
            
            print("Running printed text OCR with Textract...")
            printed_text = self.process_with_textract_printed(s3_bucket, s3_key)
            
            print("Running handwriting OCR with Textract...")
            handwritten_text = self.process_with_textract_handwriting(s3_bucket, s3_key)
            
            # Merge results into structured JSON
            structured_result = {
                'postcard_id': s3_key.split('/')[-1].split('.')[0],
                's3_location': f's3://{s3_bucket}/{s3_key}',
                'processing_timestamp': boto3.Session().region_name,
                'image_analysis': image_analysis,
                'printed_text_ocr': printed_text,
                'handwritten_text_ocr': handwritten_text,
                'processing_status': 'completed'
            }
            
            return structured_result
            
        except Exception as e:
            print(f"Error processing postcard: {e}")
            return {'processing_status': 'failed', 'error': str(e)}

# Usage example
def setup_pipeline():
    pipeline = PostcardProcessingPipeline(region_name='us-east-1')
    
    # Setup Aya Vision endpoint
    model_name = 'aya-vision-postcard-model'
    endpoint_config_name = 'aya-vision-endpoint-config'
    endpoint_name = 'aya-vision-postcard-endpoint'
    
    # Replace with your actual values
    execution_role_arn = 'arn:aws:iam::YOUR-ACCOUNT:role/SageMakerExecutionRole'
    model_data_url = 's3://your-model-bucket/aya-vision-model.tar.gz'
    image_uri = 'YOUR-ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/aya-vision:latest'
    
    # Create and deploy Aya Vision endpoint
    pipeline.create_aya_vision_model(model_name, execution_role_arn, model_data_url, image_uri)
    pipeline.create_endpoint_config(endpoint_config_name, model_name)
    pipeline.create_endpoint(endpoint_name, endpoint_config_name)
    pipeline.wait_for_endpoint(endpoint_name)
    
    return pipeline, endpoint_name
